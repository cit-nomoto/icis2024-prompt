詳細設計書

＃＃＃＃＃

関数設計

以下に、システム内の各関数に関する詳細設計を示します。

1. initial_menu
目的: 初期メニューを提供し、ユーザーのアクションに応じた関数を実行します。
処理内容:
ユーザーにメニューを表示し、選択肢を入力させる。
選択に基づいて、ユーザー登録、ログイン、またはプログラム終了の処理を行う。
入力: ユーザーからの選択肢の入力。
出力: 選択に応じた関数の実行。
エラーハンドリング:
不正な入力があった場合はエラーメッセージを表示し、再度入力を求める。

2. register_user
目的: 新規ユーザーを登録します。
処理内容:
ユーザーから学籍番号、氏名、パスワード、ユーザ区分を入力させる。
入力データのバリデーションを行い、データベースにユーザー情報を登録する。
入力: 学籍番号、氏名、パスワード、ユーザ区分。
出力: ユーザー登録の成功または失敗のメッセージ。
エラーハンドリング:
入力が空の場合や不正なデータがあった場合はエラーメッセージを表示。
既に存在する学籍番号が入力された場合はエラーメッセージを表示。
データベース操作時の例外が発生した場合は、そのエラーを表示。

3. login
目的: ユーザーのログインを処理します。
処理内容:
学籍番号とパスワードを入力させ、データベースの情報と照合する。
ログイン成功後、ユーザー区分に応じて学生メニューまたは管理メニューに進む。
入力: 学籍番号、パスワード。
出力: ログインの成功または失敗のメッセージ。
エラーハンドリング:
学籍番号またはパスワードが不正な場合はエラーメッセージを表示。

4. student_menu
目的: ログインした学生ユーザーに対するメニューを表示し、選択に応じて処理を実行します。
処理内容:
書籍検索、貸出状況更新、ログアウトの選択肢を提供する。
入力: 学生の学籍番号、ユーザーからの選択。
出力: 選択に応じた関数の実行。
エラーハンドリング:
不正な入力があった場合はエラーメッセージを表示し、再度入力を求める。

5. admin_menu
目的: ログインした管理者ユーザーに対するメニューを表示し、選択に応じて処理を実行します。
処理内容:
書籍登録、書籍削除、ユーザ削除、貸出状況一覧表示、ログアウトの選択肢を提供する。
入力: ユーザーからの選択。
出力: 選択に応じた関数の実行。
エラーハンドリング:
不正な入力があった場合はエラーメッセージを表示し、再度入力を求める。
この設計書の残りの部分は、次のメッセージで続けます。

6. register_book
目的: 新しい書籍をデータベースに登録します。
処理内容:
書籍名と著者名を入力させ、データベースに書籍情報を登録する。
入力: 書籍名、著者名。
出力: 書籍登録の成功または失敗のメッセージ。
エラーハンドリング:
書籍名が空の場合はエラーメッセージを表示。
データベース操作時の例外が発生した場合はエラーメッセージを表示。

7. delete_book
目的: データベースから書籍を削除します。
処理内容:
ユーザーに書籍名を入力させ、該当する書籍をデータベースから削除する。
入力: 書籍名。
出力: 書籍削除の成功または失敗のメッセージ。
エラーハンドリング:
該当する書籍がデータベースに存在しない場合はエラーメッセージを表示。
データベース操作時の例外が発生した場合はエラーメッセージを表示。

8. delete_user
目的: データベースからユーザーを削除します。
処理内容:
学籍番号を入力させ、該当するユーザーをデータベースから削除する。
入力: 学籍番号。
出力: ユーザ削除の成功または失敗のメッセージ。
エラーハンドリング:
該当するユーザーがデータベースに存在しない場合はエラーメッセージを表示。
データベース操作時の例外が発生した場合はエラーメッセージを表示。

9. view_loan_status
目的: 貸出中の書籍の一覧を表示します。
処理内容:
データベースから貸出中の書籍の情報を取得し、一覧表示する。
入力: なし。
出力: 貸出中の書籍の一覧。
エラーハンドリング:
データベースから情報を取得できなかった場合はエラーメッセージを表示。

10. search_books
目的: 書籍の検索と結果の表示を行います。
処理内容:
書籍名と著者名を入力させ、データベースで書籍を検索し、一致する書籍の情報を表示する。
入力: 書籍名、著者名。
出力: 検索結果の書籍一覧。
エラーハンドリング:
検索結果が空の場合は「該当する書籍はありません」と表示。
11. update_loan_status
目的: 書籍の貸出状況を更新します。
処理内容:
書籍名を入力させ、該当する書籍の貸出状況を更新する（貸出可⇔貸出不可）。
貸出を行う場合、貸出者の学籍番号を記録する。
入力: 学生の学籍番号、書籍名。
出力: 貸出状況の更新の成功または失敗のメッセージ。
エラーハンドリング:
該当する書籍がない場合はエラーメッセージを表示。
既に他のユーザーに貸出されている書籍を選択した場合はエラーメッセージを表示。
データベース操作時の例外が発生した場合はエラーメッセージを表示。

＃＃＃＃
物理テーブル設計

テーブル一覧
No 1
テーブル名：users
備考：ユーザ情報

No2
テーブル名：books
備考：書籍情報

usersテーブル定義
カラム1 :　student_id 
データ型:　INTEGER
NULL制約: NOTNULL
備考：ユーザID、学籍番号を使用

カラム2： name
データ型: TEXT
NULL制約：NOTNULL
備考：ユーザ氏名

カラム3：user_type
データ型：integer
NULL制約：NOTNULL
備考：ユーザのタイプ、0 or 1


booksテーブル定義
カラム1：book_name
データ型：TEXT
NULL制約：NOTNULL
備考：書籍の名称

カラム2：author
データ型：TEXT
NULL制約：NOTNULL
備考：書籍の著者

カラム3：loan_status
データ型：integer
NULL制約：NOTNULL
備考：書籍の貸し出し状況、貸出可＝0 不可＝1
デフォルト:0

カラム3：loaned_user
データ型：integer
NULL制約：なし
備考：書籍を借りているユーザの学籍番号

＃＃＃＃
テーブル作成SQL

ユーザー情報テーブルの作成
目的
システムユーザーの基本情報を格納するためのテーブルを作成します。このテーブルは、ユーザー認証と区分（学生、管理者）の識別に利用されます。

処理内容
SQLiteデータベースに接続し、users テーブルが存在しない場合に新たに作成します。
テーブルには学籍番号、名前、パスワード、ユーザー区分の4つのカラムを含みます。
学籍番号は主キーとして設定され、自動で重複が防止されます。
SQLコマンド
CREATE TABLE IF NOT EXISTS users (
        student_id INTEGER PRIMARY KEY,
        name TEXT NOT NULL,
        password TEXT NOT NULL,
        user_type INTEGER NOT NULL
    )
テーブルが正常に作成されるか、既に存在する場合はそのまま維持されます。
データベースエラーが発生した場合は、そのエラーメッセージがシステムログに記録されます。
書籍情報テーブルの作成
目的
図書館の書籍情報を管理するためのテーブルを作成します。このテーブルでは、各書籍の貸出状態や貸出者（ユーザー）の管理が可能です。

処理内容
SQLiteデータベースに接続し、books テーブルが存在しない場合に新たに作成します。
テーブルには書籍名、著者名、貸出状態、貸出ユーザーの4つのカラムを含みます。
貸出状態は整数で、デフォルトで0（貸出可能）となります。
貸出ユーザーは、users テーブルの学籍番号を外部キーとして参照します。

SQLコマンド

CREATE TABLE IF NOT EXISTS books (
    book_name TEXT NOT NULL,
    author TEXT NOT NULL,
    loan_status INTEGER NOT NULL DEFAULT 0,
    loaned_user INTEGER,
    FOREIGN KEY(loaned_user) REFERENCES users(student_id)
)
出力
テーブルが正常に作成されるか、既に存在する場合はそのまま維持されます。
外部キー制約により、users テーブルにない学籍番号はloaned_user として設定できません。
データベースエラーが発生した場合は、そのエラーメッセージがシステムログに記録されます

＃＃＃

DB接続

sqlite3.connect、cursor、を使用
